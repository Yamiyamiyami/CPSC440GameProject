How to use GitHub with Unity
Here's a helpful tutorial https://www.youtube.com/watch?v=R2fl17eEpwI if you want to look more into it.

Due to the experiences I (and Jennifer and Kevin) experienced with GitHub, we're going to try something a bit different.
Instead of having everyone on one repository, we're going to have everyone fork this repository to their personal GitHubs so that they can make changes in it and then ask to do pull requests to add their changes to this repository. Thus, this is how we are going to organize it:

	The Master Repository (The latest version of the game)
	Each Collaborator's Repository (A copy of the master repository, so that they can make as many changes as they want)

In order to use GitHub, Windows users will need to install GitBash: https://git-for-windows.github.io. For Mac/Linux users, all you need to do is open Terminal and enter 'git' and follow what the screen tells you. There's also a desktop version of GitHub that's more visual, but from what I've seen, it's ok. You can try it out, but I won't be able to help you, since I was taught the command line way.

So, after you get that set up:
1.) Fork over this repository to your personal GitHub account. (look for the Fork button on the Master Repo)
2.) Clone the forked repository to your computer. (look for the green button and copy the link)
	2.1) Go to a folder in your computer that you want to have this local copy of the forked repo saved at and open GitBash/Terminal at that folder and type 'git clone [paste the link here] '

If there's any changes in the Master Repository, it's IMPORTANT to pull them into your forked repo. To do this, you need to first add the remote address of the Master Repository to your cloned repo.
	1.) git remote add upstream [link to master repo]
		If you made a mistake, 'git remote remove [name of remote] ' removes that remote address
		To see the number of remote repositories and their names, type 'git remote'. You should only see 'origin', which is your remote repo that you forked. If you want to see the address for this, type 'git remote -v' (-v is verbose, meaning more details)

After doing that, you can then pull (take in) changes from the Master Repository by typing
	1.) git pull upstream master
		Master is the name of a branch in GitHub. The master branch is THE place where everything official is at. So to have your forked repository be updated with the official copy, make sure you specify the master branch.

When making changes, you can make a new branch in your repository, which allows you to experiment without having to worry about the current copy of the repo you have. Every repository has a master, which is the default branch, but to make more,
	1.) git checkout -b [name of branch]
		To switch branches: git checkout [name of branch]
		To check what branch you're on: git branch

To commit and add changes to a branch:
	1.) git add [file name] (make sure you're in the directory of that file, otherwise you'll have to specify the file name)
	2.) git commit -m "message" (-m is message)
		By doing this, you can then change to other branches without fear of losing those changes, since they are stored in that branch's commits.

To update your local repository,
	1.) git push origin [name of branch]

To add changes to the Master Repository, you'll have to open a pull request on the Master Repository (when you pushed a branch to your local repo, a green button on GitHub will say 'compare and pul request'. Use that)
	1.) Leave a comment on there saying what you did or contact the FB message group, so that the moderator of the group can approve of it and merge it.
		If there's a conflict merging, look and see where in the master branch of the Master Repo has a change that conflicts with your copy. Check the NOTE section for how to handle most cases.
	2.) Once it's approved and merged, you can delete that branch safely. (You'll still have that branch locally, not remotely)
	3.) To update your local repository to the new Master Repository, simply switch to the master branch of your repository, pull from the upstream master and then push to your own local repository.

	NOTE: If you try pulling from the upstream (the Master Repo's master branch) and get a conflict, first type 'git status' to see what's the conflict, and reopen it. You'll see something like this in the file:
		<<<<<<<HEAD
			"Your changes"
		==============
			"someone else's changes"
		>>>>>>>w23sjdasjdl
	You need to manually inspect each part of these that appear in the file and either keep your changes, delete the other person's changes, or get rid of it all together. After doing so, you need to re add in the file, recommit it, and push it to your loco repo.

TL;DR, make a new branch in your fetched repo to add changes and make pull requests to the Master Repo when you want those changes in that branch to get merged to the Master Repo.

TIP: 'git status' is a good way to check what is changed, what needs to be committed, the branch you're on, and to check what's wrong if git is giving you an error message.
TIP: DO NOT use 'git add -A'. ONLY add and commit files YOU changed yourself knowingly!
